import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import * as i0 from "@angular/core";
var ShowHideService = /** @class */ (function () {
    function ShowHideService() {
        this.states = [];
    }
    ShowHideService.prototype.getIO = function (id) {
        var io = this.states.find(function (o) { return o.id === id; });
        if (!io && id) {
            io = this.init(id);
        }
        return io;
    };
    ShowHideService.prototype.init = function (id) {
        var subject = new ReplaySubject(1);
        var io = {
            id: id,
            show: false,
            subject: subject
        };
        this.states.push(io);
        return io;
    };
    ShowHideService.prototype.saveAndProadcast = function (io, show) {
        io.show = show;
        io.subject.next(io.show);
    };
    ShowHideService.prototype.getObservable = function (id) {
        return this.getIO(id).subject;
    };
    ShowHideService.prototype.setShow = function (id, show) {
        this.saveAndProadcast(this.getIO(id), show);
    };
    ShowHideService.prototype.toggleShow = function (id) {
        var io = this.getIO(id);
        this.saveAndProadcast(io, !io.show);
    };
    ShowHideService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ShowHideService_Factory() { return new ShowHideService(); }, token: ShowHideService, providedIn: "root" });
    ShowHideService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], ShowHideService);
    return ShowHideService;
}());
export { ShowHideService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1oaWRlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2hvdy1oaWRlLXBhc3N3b3JkLyIsInNvdXJjZXMiOlsibGliL3Nob3ctaGlkZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBdUIsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDOztBQVcxRDtJQUdFO1FBRmlCLFdBQU0sR0FBRyxFQUFFLENBQUM7SUFFZCxDQUFDO0lBRVIsK0JBQUssR0FBYixVQUFjLEVBQVU7UUFDdEIsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBWCxDQUFXLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRTtZQUNiLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3BCO1FBQ0QsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRU8sOEJBQUksR0FBWixVQUFhLEVBQVU7UUFDckIsSUFBTSxPQUFPLEdBQUcsSUFBSSxhQUFhLENBQVUsQ0FBQyxDQUFDLENBQUM7UUFDOUMsSUFBTSxFQUFFLEdBQUc7WUFDVCxFQUFFLElBQUE7WUFDRixJQUFJLEVBQUUsS0FBSztZQUNYLE9BQU8sU0FBQTtTQUNSLENBQUM7UUFDRixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNyQixPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFTywwQ0FBZ0IsR0FBeEIsVUFBeUIsRUFBVSxFQUFFLElBQWE7UUFDaEQsRUFBRSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDZixFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVNLHVDQUFhLEdBQXBCLFVBQXFCLEVBQVU7UUFDN0IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUNoQyxDQUFDO0lBRU0saUNBQU8sR0FBZCxVQUFlLEVBQVUsRUFBRSxJQUFhO1FBQ3RDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFTSxvQ0FBVSxHQUFqQixVQUFrQixFQUFVO1FBQzFCLElBQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDMUIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QyxDQUFDOztJQXhDVSxlQUFlO1FBSDNCLFVBQVUsQ0FBQztZQUNWLFVBQVUsRUFBRSxNQUFNO1NBQ25CLENBQUM7T0FDVyxlQUFlLENBeUMzQjswQkFyREQ7Q0FxREMsQUF6Q0QsSUF5Q0M7U0F6Q1ksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QsIFJlcGxheVN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuaW50ZXJmYWNlIElTdGF0ZSB7XG4gIGlkOiBzdHJpbmc7XG4gIHNob3c6IGJvb2xlYW47XG4gIHN1YmplY3Q/OiBTdWJqZWN0PGJvb2xlYW4+O1xufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBTaG93SGlkZVNlcnZpY2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IHN0YXRlcyA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBwcml2YXRlIGdldElPKGlkOiBzdHJpbmcpOiBJU3RhdGUge1xuICAgIGxldCBpbyA9IHRoaXMuc3RhdGVzLmZpbmQobyA9PiBvLmlkID09PSBpZCk7XG4gICAgaWYgKCFpbyAmJiBpZCkge1xuICAgICAgaW8gPSB0aGlzLmluaXQoaWQpO1xuICAgIH1cbiAgICByZXR1cm4gaW87XG4gIH1cblxuICBwcml2YXRlIGluaXQoaWQ6IHN0cmluZyk6IElTdGF0ZSB7XG4gICAgY29uc3Qgc3ViamVjdCA9IG5ldyBSZXBsYXlTdWJqZWN0PGJvb2xlYW4+KDEpO1xuICAgIGNvbnN0IGlvID0ge1xuICAgICAgaWQsXG4gICAgICBzaG93OiBmYWxzZSxcbiAgICAgIHN1YmplY3RcbiAgICB9O1xuICAgIHRoaXMuc3RhdGVzLnB1c2goaW8pO1xuICAgIHJldHVybiBpbztcbiAgfVxuXG4gIHByaXZhdGUgc2F2ZUFuZFByb2FkY2FzdChpbzogSVN0YXRlLCBzaG93OiBib29sZWFuKSB7XG4gICAgaW8uc2hvdyA9IHNob3c7XG4gICAgaW8uc3ViamVjdC5uZXh0KGlvLnNob3cpO1xuICB9XG5cbiAgcHVibGljIGdldE9ic2VydmFibGUoaWQ6IHN0cmluZyk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLmdldElPKGlkKS5zdWJqZWN0O1xuICB9XG5cbiAgcHVibGljIHNldFNob3coaWQ6IHN0cmluZywgc2hvdzogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuc2F2ZUFuZFByb2FkY2FzdCh0aGlzLmdldElPKGlkKSwgc2hvdyk7XG4gIH1cblxuICBwdWJsaWMgdG9nZ2xlU2hvdyhpZDogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc3QgaW8gPSB0aGlzLmdldElPKGlkKTtcbiAgICB0aGlzLnNhdmVBbmRQcm9hZGNhc3QoaW8sICFpby5zaG93KTtcbiAgfVxufVxuIl19