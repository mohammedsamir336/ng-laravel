import { __assign, __decorate } from "tslib";
import { Directive, ElementRef, Renderer2, Input, ErrorHandler, OnDestroy } from '@angular/core';
import { ShowHideService } from './show-hide.service';
var ShowHideStatusDirective = /** @class */ (function () {
    function ShowHideStatusDirective(service, el, renderer, errorHandler) {
        this.service = service;
        this.el = el;
        this.renderer = renderer;
        this.errorHandler = errorHandler;
    }
    Object.defineProperty(ShowHideStatusDirective.prototype, "showHideStatus", {
        set: function (config) {
            this.init(config);
        },
        enumerable: true,
        configurable: true
    });
    ShowHideStatusDirective.prototype.init = function (config) {
        var _this = this;
        var defaultConfig = {
            show: 'visibility',
            hide: 'visibility_off',
            materialIcon: false,
            id: null
        };
        this.config = __assign(__assign({}, defaultConfig), config);
        if (this.config.id) {
            this.subscription = this.service
                .getObservable(this.config.id)
                .subscribe(function (show) { return _this.updateStatus(show); });
        }
        else {
            this.errorHandler.handleError(new Error("Status can not be set without [id]."));
        }
    };
    ShowHideStatusDirective.prototype.updateStatus = function (show) {
        if (this.config.materialIcon) {
            this.renderer.setProperty(this.el.nativeElement, 'innerHTML', show ? this.config.hide : this.config.show);
        }
        else {
            this.renderer.removeClass(this.el.nativeElement, !show ? this.config.hide : this.config.show);
            this.renderer.addClass(this.el.nativeElement, show ? this.config.hide : this.config.show);
        }
    };
    ShowHideStatusDirective.prototype.ngOnDestroy = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    ShowHideStatusDirective.ctorParameters = function () { return [
        { type: ShowHideService },
        { type: ElementRef },
        { type: Renderer2 },
        { type: ErrorHandler }
    ]; };
    __decorate([
        Input()
    ], ShowHideStatusDirective.prototype, "showHideStatus", null);
    ShowHideStatusDirective = __decorate([
        Directive({
            selector: '[showHideStatus]'
        })
    ], ShowHideStatusDirective);
    return ShowHideStatusDirective;
}());
export { ShowHideStatusDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1oaWRlLXN0YXR1cy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2hvdy1oaWRlLXBhc3N3b3JkLyIsInNvdXJjZXMiOlsibGliL3Nob3ctaGlkZS1zdGF0dXMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakcsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBYXREO0lBUUUsaUNBQ1UsT0FBd0IsRUFDeEIsRUFBYyxFQUNkLFFBQW1CLEVBQ25CLFlBQTBCO1FBSDFCLFlBQU8sR0FBUCxPQUFPLENBQWlCO1FBQ3hCLE9BQUUsR0FBRixFQUFFLENBQVk7UUFDZCxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQ25CLGlCQUFZLEdBQVosWUFBWSxDQUFjO0lBQ2pDLENBQUM7SUFUSyxzQkFBSSxtREFBYzthQUFsQixVQUFtQixNQUE0QjtZQUN0RCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3BCLENBQUM7OztPQUFBO0lBU08sc0NBQUksR0FBWixVQUFhLE1BQTRCO1FBQXpDLGlCQWtCQztRQWpCQyxJQUFNLGFBQWEsR0FBRztZQUNwQixJQUFJLEVBQUUsWUFBWTtZQUNsQixJQUFJLEVBQUUsZ0JBQWdCO1lBQ3RCLFlBQVksRUFBRSxLQUFLO1lBQ25CLEVBQUUsRUFBRSxJQUFJO1NBQ1QsQ0FBQztRQUNGLElBQUksQ0FBQyxNQUFNLHlCQUNOLGFBQWEsR0FDYixNQUFNLENBQ1YsQ0FBQztRQUNGLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsT0FBTztpQkFDN0IsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO2lCQUM3QixTQUFTLENBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxLQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUF2QixDQUF1QixDQUFDLENBQUM7U0FDL0M7YUFBTTtZQUNMLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLElBQUksS0FBSyxDQUFDLHFDQUFxQyxDQUFDLENBQUMsQ0FBQztTQUNqRjtJQUNILENBQUM7SUFFTyw4Q0FBWSxHQUFwQixVQUFxQixJQUFhO1FBQ2hDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUU7WUFDNUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQ3ZCLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUNyQixXQUFXLEVBQ1gsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQzNDLENBQUM7U0FDSDthQUFNO1lBQ0wsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzlGLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDM0Y7SUFDSCxDQUFDO0lBRUQsNkNBQVcsR0FBWDtRQUNFLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ2pDO0lBQ0gsQ0FBQzs7Z0JBM0NrQixlQUFlO2dCQUNwQixVQUFVO2dCQUNKLFNBQVM7Z0JBQ0wsWUFBWTs7SUFSM0I7UUFBUixLQUFLLEVBQUU7aUVBRVA7SUFOVSx1QkFBdUI7UUFIbkMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGtCQUFrQjtTQUM3QixDQUFDO09BQ1csdUJBQXVCLENBcURuQztJQUFELDhCQUFDO0NBQUEsQUFyREQsSUFxREM7U0FyRFksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIElucHV0LCBFcnJvckhhbmRsZXIsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2hvd0hpZGVTZXJ2aWNlIH0gZnJvbSAnLi9zaG93LWhpZGUuc2VydmljZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGludGVyZmFjZSBTaG93SGlkZVN0YXR1c0NvbmZpZyB7XG4gIGlkPzogc3RyaW5nO1xuICBzaG93Pzogc3RyaW5nO1xuICBoaWRlPzogc3RyaW5nO1xuICBtYXRlcmlhbEljb24/OiBib29sZWFuO1xufVxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbc2hvd0hpZGVTdGF0dXNdJ1xufSlcbmV4cG9ydCBjbGFzcyBTaG93SGlkZVN0YXR1c0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgY29uZmlnOiBTaG93SGlkZVN0YXR1c0NvbmZpZztcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblxuICBASW5wdXQoKSBzZXQgc2hvd0hpZGVTdGF0dXMoY29uZmlnOiBTaG93SGlkZVN0YXR1c0NvbmZpZykge1xuICAgIHRoaXMuaW5pdChjb25maWcpO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBzZXJ2aWNlOiBTaG93SGlkZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgcHJpdmF0ZSBlcnJvckhhbmRsZXI6IEVycm9ySGFuZGxlclxuICApIHt9XG5cbiAgcHJpdmF0ZSBpbml0KGNvbmZpZzogU2hvd0hpZGVTdGF0dXNDb25maWcpOiB2b2lkIHtcbiAgICBjb25zdCBkZWZhdWx0Q29uZmlnID0ge1xuICAgICAgc2hvdzogJ3Zpc2liaWxpdHknLFxuICAgICAgaGlkZTogJ3Zpc2liaWxpdHlfb2ZmJyxcbiAgICAgIG1hdGVyaWFsSWNvbjogZmFsc2UsXG4gICAgICBpZDogbnVsbFxuICAgIH07XG4gICAgdGhpcy5jb25maWcgPSB7XG4gICAgICAuLi5kZWZhdWx0Q29uZmlnLFxuICAgICAgLi4uY29uZmlnXG4gICAgfTtcbiAgICBpZiAodGhpcy5jb25maWcuaWQpIHtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gdGhpcy5zZXJ2aWNlXG4gICAgICAgIC5nZXRPYnNlcnZhYmxlKHRoaXMuY29uZmlnLmlkKVxuICAgICAgICAuc3Vic2NyaWJlKHNob3cgPT4gdGhpcy51cGRhdGVTdGF0dXMoc2hvdykpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVycm9ySGFuZGxlci5oYW5kbGVFcnJvcihuZXcgRXJyb3IoYFN0YXR1cyBjYW4gbm90IGJlIHNldCB3aXRob3V0IFtpZF0uYCkpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlU3RhdHVzKHNob3c6IGJvb2xlYW4pIHtcbiAgICBpZiAodGhpcy5jb25maWcubWF0ZXJpYWxJY29uKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldFByb3BlcnR5KFxuICAgICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgICdpbm5lckhUTUwnLFxuICAgICAgICBzaG93ID8gdGhpcy5jb25maWcuaGlkZSA6IHRoaXMuY29uZmlnLnNob3dcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5lbC5uYXRpdmVFbGVtZW50LCAhc2hvdyA/IHRoaXMuY29uZmlnLmhpZGUgOiB0aGlzLmNvbmZpZy5zaG93KTtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbC5uYXRpdmVFbGVtZW50LCBzaG93ID8gdGhpcy5jb25maWcuaGlkZSA6IHRoaXMuY29uZmlnLnNob3cpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==