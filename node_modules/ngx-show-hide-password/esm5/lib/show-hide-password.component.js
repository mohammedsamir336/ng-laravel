import { __decorate } from "tslib";
import { Component, ElementRef, Input, OnInit, Renderer2, ChangeDetectionStrategy, OnDestroy } from '@angular/core';
import { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';
import { ShowHideService } from './show-hide.service';
export var BtnStyle;
(function (BtnStyle) {
    BtnStyle["Primary"] = "primary";
    BtnStyle["Secondary"] = "secondary";
    BtnStyle["Success"] = "success";
    BtnStyle["Danger"] = "danger";
    BtnStyle["Warning"] = "warning";
    BtnStyle["Info"] = "info";
    BtnStyle["Dark"] = "dark";
    BtnStyle["Light"] = "light";
})(BtnStyle || (BtnStyle = {}));
// hail jed https://gist.github.com/jed/982883
var uuid = function (a) {
    return a
        ? // tslint:disable-next-line: no-bitwise
            (a ^ ((Math.random() * 16) >> (a / 4))).toString(16)
        : ('' + 1e7 + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, uuid);
};
var ɵ0 = uuid;
/**
 * Add a split input button to password or text input. Toggles input type between "text" and "password".
 *
 * @example
 * <show-hide-password size="sm|lg">
 * <input type="password" name=... />
 * </show-hide-password>
 */
var ShowHidePasswordComponent = /** @class */ (function () {
    function ShowHidePasswordComponent(service, elem, renderer) {
        this.service = service;
        this.elem = elem;
        this.renderer = renderer;
        this.btnStyle = BtnStyle.Secondary;
        this.btnOutline = true;
        this.faEye = faEye;
        this.faEyeSlash = faEyeSlash;
    }
    ShowHidePasswordComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.input = this.elem.nativeElement.querySelector('input');
        if (!this.input) {
            throw new Error("No input element found.");
        }
        this.id = this.input.getAttribute('id');
        if (!this.id) {
            this.id = 'showHideInput_' + uuid();
            this.renderer.setAttribute(this.input, 'id', this.id);
        }
        this.renderer.addClass(this.elem.nativeElement, 'input-group');
        if (this.size === 'sm') {
            this.renderer.addClass(this.elem.nativeElement, 'input-group-sm');
        }
        else if (this.size === 'lg') {
            this.renderer.addClass(this.elem.nativeElement, 'input-group-lg');
        }
        this.isHidden = this.input.type === 'password';
        this.renderer.addClass(this.input, 'form-control'); // just to be sure
        this.service.setShow(this.id, this.input.type !== 'password');
        this.subscription = this.service
            .getObservable(this.id)
            .subscribe(function (show) {
            _this.isHidden = !show;
            _this.renderer.setAttribute(_this.input, 'type', show ? 'text' : 'password');
        });
    };
    ShowHidePasswordComponent.prototype.ngOnDestroy = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    ShowHidePasswordComponent.ctorParameters = function () { return [
        { type: ShowHideService },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input()
    ], ShowHidePasswordComponent.prototype, "btnStyle", void 0);
    __decorate([
        Input()
    ], ShowHidePasswordComponent.prototype, "btnOutline", void 0);
    __decorate([
        Input()
    ], ShowHidePasswordComponent.prototype, "size", void 0);
    ShowHidePasswordComponent = __decorate([
        Component({
            selector: 'show-hide-password',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: "\n    <ng-content></ng-content>\n    <div class=\"input-group-append ngx-show-hide-password\">\n      <button\n        class=\"btn\"\n        [ngClass]=\"(btnOutline ? 'btn-outline-' + btnStyle : 'btn-' + btnStyle)\"\n        type=\"button\"\n        [showHideTrigger]=\"id\"\n      >\n        <fa-icon\n          [fixedWidth]=\"true\"\n          size=\"lg\"\n          [icon]=\"(isHidden ? faEye : faEyeSlash)\"\n          [showHideStatus]=\"{ id: id }\"\n        ></fa-icon>\n      </button>\n    </div>\n  "
        })
    ], ShowHidePasswordComponent);
    return ShowHidePasswordComponent;
}());
export { ShowHidePasswordComponent };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,