import { __decorate, __assign } from 'tslib';
import { ɵɵdefineInjectable, Injectable, ErrorHandler, Input, HostListener, Directive, ElementRef, Renderer2, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { FontAwesomeModule } from '@fortawesome/angular-fontawesome';

var ShowHideService = /** @class */ (function () {
    function ShowHideService() {
        this.states = [];
    }
    ShowHideService.prototype.getIO = function (id) {
        var io = this.states.find(function (o) { return o.id === id; });
        if (!io && id) {
            io = this.init(id);
        }
        return io;
    };
    ShowHideService.prototype.init = function (id) {
        var subject = new ReplaySubject(1);
        var io = {
            id: id,
            show: false,
            subject: subject
        };
        this.states.push(io);
        return io;
    };
    ShowHideService.prototype.saveAndProadcast = function (io, show) {
        io.show = show;
        io.subject.next(io.show);
    };
    ShowHideService.prototype.getObservable = function (id) {
        return this.getIO(id).subject;
    };
    ShowHideService.prototype.setShow = function (id, show) {
        this.saveAndProadcast(this.getIO(id), show);
    };
    ShowHideService.prototype.toggleShow = function (id) {
        var io = this.getIO(id);
        this.saveAndProadcast(io, !io.show);
    };
    ShowHideService.ɵprov = ɵɵdefineInjectable({ factory: function ShowHideService_Factory() { return new ShowHideService(); }, token: ShowHideService, providedIn: "root" });
    ShowHideService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], ShowHideService);
    return ShowHideService;
}());

var ShowHideTriggerDirective = /** @class */ (function () {
    function ShowHideTriggerDirective(service, errorHandler) {
        this.service = service;
        this.errorHandler = errorHandler;
    }
    ShowHideTriggerDirective.prototype.onClick = function () {
        if (this.showHideTrigger) {
            this.service.toggleShow(this.showHideTrigger);
        }
        else {
            this.errorHandler.handleError(new Error("Status can not be changed without [id]."));
        }
    };
    ShowHideTriggerDirective.ctorParameters = function () { return [
        { type: ShowHideService },
        { type: ErrorHandler }
    ]; };
    __decorate([
        Input()
    ], ShowHideTriggerDirective.prototype, "showHideTrigger", void 0);
    __decorate([
        HostListener('click')
    ], ShowHideTriggerDirective.prototype, "onClick", null);
    ShowHideTriggerDirective = __decorate([
        Directive({
            selector: '[showHideTrigger]'
        })
    ], ShowHideTriggerDirective);
    return ShowHideTriggerDirective;
}());

var ShowHideStatusDirective = /** @class */ (function () {
    function ShowHideStatusDirective(service, el, renderer, errorHandler) {
        this.service = service;
        this.el = el;
        this.renderer = renderer;
        this.errorHandler = errorHandler;
    }
    Object.defineProperty(ShowHideStatusDirective.prototype, "showHideStatus", {
        set: function (config) {
            this.init(config);
        },
        enumerable: true,
        configurable: true
    });
    ShowHideStatusDirective.prototype.init = function (config) {
        var _this = this;
        var defaultConfig = {
            show: 'visibility',
            hide: 'visibility_off',
            materialIcon: false,
            id: null
        };
        this.config = __assign(__assign({}, defaultConfig), config);
        if (this.config.id) {
            this.subscription = this.service
                .getObservable(this.config.id)
                .subscribe(function (show) { return _this.updateStatus(show); });
        }
        else {
            this.errorHandler.handleError(new Error("Status can not be set without [id]."));
        }
    };
    ShowHideStatusDirective.prototype.updateStatus = function (show) {
        if (this.config.materialIcon) {
            this.renderer.setProperty(this.el.nativeElement, 'innerHTML', show ? this.config.hide : this.config.show);
        }
        else {
            this.renderer.removeClass(this.el.nativeElement, !show ? this.config.hide : this.config.show);
            this.renderer.addClass(this.el.nativeElement, show ? this.config.hide : this.config.show);
        }
    };
    ShowHideStatusDirective.prototype.ngOnDestroy = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    ShowHideStatusDirective.ctorParameters = function () { return [
        { type: ShowHideService },
        { type: ElementRef },
        { type: Renderer2 },
        { type: ErrorHandler }
    ]; };
    __decorate([
        Input()
    ], ShowHideStatusDirective.prototype, "showHideStatus", null);
    ShowHideStatusDirective = __decorate([
        Directive({
            selector: '[showHideStatus]'
        })
    ], ShowHideStatusDirective);
    return ShowHideStatusDirective;
}());

var ShowHideInputDirective = /** @class */ (function () {
    function ShowHideInputDirective(service, el, renderer) {
        this.service = service;
        this.el = el;
        this.renderer = renderer;
        this.id = this.el.nativeElement.getAttribute('id');
        if (!this.id) {
            throw new Error("No attribute [id] found.");
        }
        this.service.setShow(this.id, this.el.nativeElement.type !== 'password');
    }
    ShowHideInputDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.service
            .getObservable(this.id)
            .subscribe(function (show) {
            return _this.renderer.setAttribute(_this.el.nativeElement, 'type', show ? 'text' : 'password');
        });
    };
    ShowHideInputDirective.prototype.ngOnDestroy = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    ShowHideInputDirective.ctorParameters = function () { return [
        { type: ShowHideService },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    ShowHideInputDirective = __decorate([
        Directive({
            selector: 'input[showHideInput]'
        })
    ], ShowHideInputDirective);
    return ShowHideInputDirective;
}());

var BtnStyle;
(function (BtnStyle) {
    BtnStyle["Primary"] = "primary";
    BtnStyle["Secondary"] = "secondary";
    BtnStyle["Success"] = "success";
    BtnStyle["Danger"] = "danger";
    BtnStyle["Warning"] = "warning";
    BtnStyle["Info"] = "info";
    BtnStyle["Dark"] = "dark";
    BtnStyle["Light"] = "light";
})(BtnStyle || (BtnStyle = {}));
// hail jed https://gist.github.com/jed/982883
var uuid = function (a) {
    return a
        ? // tslint:disable-next-line: no-bitwise
            (a ^ ((Math.random() * 16) >> (a / 4))).toString(16)
        : ('' + 1e7 + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, uuid);
};
var ɵ0 = uuid;
/**
 * Add a split input button to password or text input. Toggles input type between "text" and "password".
 *
 * @example
 * <show-hide-password size="sm|lg">
 * <input type="password" name=... />
 * </show-hide-password>
 */
var ShowHidePasswordComponent = /** @class */ (function () {
    function ShowHidePasswordComponent(service, elem, renderer) {
        this.service = service;
        this.elem = elem;
        this.renderer = renderer;
        this.btnStyle = BtnStyle.Secondary;
        this.btnOutline = true;
        this.faEye = faEye;
        this.faEyeSlash = faEyeSlash;
    }
    ShowHidePasswordComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.input = this.elem.nativeElement.querySelector('input');
        if (!this.input) {
            throw new Error("No input element found.");
        }
        this.id = this.input.getAttribute('id');
        if (!this.id) {
            this.id = 'showHideInput_' + uuid();
            this.renderer.setAttribute(this.input, 'id', this.id);
        }
        this.renderer.addClass(this.elem.nativeElement, 'input-group');
        if (this.size === 'sm') {
            this.renderer.addClass(this.elem.nativeElement, 'input-group-sm');
        }
        else if (this.size === 'lg') {
            this.renderer.addClass(this.elem.nativeElement, 'input-group-lg');
        }
        this.isHidden = this.input.type === 'password';
        this.renderer.addClass(this.input, 'form-control'); // just to be sure
        this.service.setShow(this.id, this.input.type !== 'password');
        this.subscription = this.service
            .getObservable(this.id)
            .subscribe(function (show) {
            _this.isHidden = !show;
            _this.renderer.setAttribute(_this.input, 'type', show ? 'text' : 'password');
        });
    };
    ShowHidePasswordComponent.prototype.ngOnDestroy = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    ShowHidePasswordComponent.ctorParameters = function () { return [
        { type: ShowHideService },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input()
    ], ShowHidePasswordComponent.prototype, "btnStyle", void 0);
    __decorate([
        Input()
    ], ShowHidePasswordComponent.prototype, "btnOutline", void 0);
    __decorate([
        Input()
    ], ShowHidePasswordComponent.prototype, "size", void 0);
    ShowHidePasswordComponent = __decorate([
        Component({
            selector: 'show-hide-password',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: "\n    <ng-content></ng-content>\n    <div class=\"input-group-append ngx-show-hide-password\">\n      <button\n        class=\"btn\"\n        [ngClass]=\"(btnOutline ? 'btn-outline-' + btnStyle : 'btn-' + btnStyle)\"\n        type=\"button\"\n        [showHideTrigger]=\"id\"\n      >\n        <fa-icon\n          [fixedWidth]=\"true\"\n          size=\"lg\"\n          [icon]=\"(isHidden ? faEye : faEyeSlash)\"\n          [showHideStatus]=\"{ id: id }\"\n        ></fa-icon>\n      </button>\n    </div>\n  "
        })
    ], ShowHidePasswordComponent);
    return ShowHidePasswordComponent;
}());

var ShowHidePasswordModule = /** @class */ (function () {
    function ShowHidePasswordModule() {
    }
    ShowHidePasswordModule = __decorate([
        NgModule({
            imports: [CommonModule, FormsModule, FontAwesomeModule],
            exports: [
                ShowHidePasswordComponent,
                ShowHideTriggerDirective,
                ShowHideInputDirective,
                ShowHideStatusDirective
            ],
            declarations: [
                ShowHidePasswordComponent,
                ShowHideTriggerDirective,
                ShowHideInputDirective,
                ShowHideStatusDirective
            ]
        })
    ], ShowHidePasswordModule);
    return ShowHidePasswordModule;
}());

/*
 * Public API Surface of ngx-show-hide-password
 */

/**
 * Generated bundle index. Do not edit.
 */

export { BtnStyle, ShowHideInputDirective, ShowHidePasswordComponent, ShowHidePasswordModule, ShowHideService, ShowHideStatusDirective, ShowHideTriggerDirective, ɵ0 };
//# sourceMappingURL=ngx-show-hide-password.js.map
