import { __decorate } from "tslib";
import { Directive, ElementRef, Renderer2, Input, ErrorHandler, OnDestroy } from '@angular/core';
import { ShowHideService } from './show-hide.service';
let ShowHideStatusDirective = class ShowHideStatusDirective {
    constructor(service, el, renderer, errorHandler) {
        this.service = service;
        this.el = el;
        this.renderer = renderer;
        this.errorHandler = errorHandler;
    }
    set showHideStatus(config) {
        this.init(config);
    }
    init(config) {
        const defaultConfig = {
            show: 'visibility',
            hide: 'visibility_off',
            materialIcon: false,
            id: null
        };
        this.config = Object.assign(Object.assign({}, defaultConfig), config);
        if (this.config.id) {
            this.subscription = this.service
                .getObservable(this.config.id)
                .subscribe(show => this.updateStatus(show));
        }
        else {
            this.errorHandler.handleError(new Error(`Status can not be set without [id].`));
        }
    }
    updateStatus(show) {
        if (this.config.materialIcon) {
            this.renderer.setProperty(this.el.nativeElement, 'innerHTML', show ? this.config.hide : this.config.show);
        }
        else {
            this.renderer.removeClass(this.el.nativeElement, !show ? this.config.hide : this.config.show);
            this.renderer.addClass(this.el.nativeElement, show ? this.config.hide : this.config.show);
        }
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
};
ShowHideStatusDirective.ctorParameters = () => [
    { type: ShowHideService },
    { type: ElementRef },
    { type: Renderer2 },
    { type: ErrorHandler }
];
__decorate([
    Input()
], ShowHideStatusDirective.prototype, "showHideStatus", null);
ShowHideStatusDirective = __decorate([
    Directive({
        selector: '[showHideStatus]'
    })
], ShowHideStatusDirective);
export { ShowHideStatusDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1oaWRlLXN0YXR1cy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2hvdy1oaWRlLXBhc3N3b3JkLyIsInNvdXJjZXMiOlsibGliL3Nob3ctaGlkZS1zdGF0dXMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakcsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBYXRELElBQWEsdUJBQXVCLEdBQXBDLE1BQWEsdUJBQXVCO0lBUWxDLFlBQ1UsT0FBd0IsRUFDeEIsRUFBYyxFQUNkLFFBQW1CLEVBQ25CLFlBQTBCO1FBSDFCLFlBQU8sR0FBUCxPQUFPLENBQWlCO1FBQ3hCLE9BQUUsR0FBRixFQUFFLENBQVk7UUFDZCxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQ25CLGlCQUFZLEdBQVosWUFBWSxDQUFjO0lBQ2pDLENBQUM7SUFUSyxJQUFJLGNBQWMsQ0FBQyxNQUE0QjtRQUN0RCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3BCLENBQUM7SUFTTyxJQUFJLENBQUMsTUFBNEI7UUFDdkMsTUFBTSxhQUFhLEdBQUc7WUFDcEIsSUFBSSxFQUFFLFlBQVk7WUFDbEIsSUFBSSxFQUFFLGdCQUFnQjtZQUN0QixZQUFZLEVBQUUsS0FBSztZQUNuQixFQUFFLEVBQUUsSUFBSTtTQUNULENBQUM7UUFDRixJQUFJLENBQUMsTUFBTSxtQ0FDTixhQUFhLEdBQ2IsTUFBTSxDQUNWLENBQUM7UUFDRixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU87aUJBQzdCLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztpQkFDN0IsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQy9DO2FBQU07WUFDTCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEtBQUssQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDLENBQUM7U0FDakY7SUFDSCxDQUFDO0lBRU8sWUFBWSxDQUFDLElBQWE7UUFDaEMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRTtZQUM1QixJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FDdkIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQ3JCLFdBQVcsRUFDWCxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDM0MsQ0FBQztTQUNIO2FBQU07WUFDTCxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDOUYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMzRjtJQUNILENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDakM7SUFDSCxDQUFDO0NBQ0YsQ0FBQTs7WUE1Q29CLGVBQWU7WUFDcEIsVUFBVTtZQUNKLFNBQVM7WUFDTCxZQUFZOztBQVIzQjtJQUFSLEtBQUssRUFBRTs2REFFUDtBQU5VLHVCQUF1QjtJQUhuQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsa0JBQWtCO0tBQzdCLENBQUM7R0FDVyx1QkFBdUIsQ0FxRG5DO1NBckRZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBJbnB1dCwgRXJyb3JIYW5kbGVyLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNob3dIaWRlU2VydmljZSB9IGZyb20gJy4vc2hvdy1oaWRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2hvd0hpZGVTdGF0dXNDb25maWcge1xuICBpZD86IHN0cmluZztcbiAgc2hvdz86IHN0cmluZztcbiAgaGlkZT86IHN0cmluZztcbiAgbWF0ZXJpYWxJY29uPzogYm9vbGVhbjtcbn1cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3Nob3dIaWRlU3RhdHVzXSdcbn0pXG5leHBvcnQgY2xhc3MgU2hvd0hpZGVTdGF0dXNEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICBwcml2YXRlIGNvbmZpZzogU2hvd0hpZGVTdGF0dXNDb25maWc7XG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgQElucHV0KCkgc2V0IHNob3dIaWRlU3RhdHVzKGNvbmZpZzogU2hvd0hpZGVTdGF0dXNDb25maWcpIHtcbiAgICB0aGlzLmluaXQoY29uZmlnKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgc2VydmljZTogU2hvd0hpZGVTZXJ2aWNlLFxuICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIHByaXZhdGUgZXJyb3JIYW5kbGVyOiBFcnJvckhhbmRsZXJcbiAgKSB7fVxuXG4gIHByaXZhdGUgaW5pdChjb25maWc6IFNob3dIaWRlU3RhdHVzQ29uZmlnKTogdm9pZCB7XG4gICAgY29uc3QgZGVmYXVsdENvbmZpZyA9IHtcbiAgICAgIHNob3c6ICd2aXNpYmlsaXR5JyxcbiAgICAgIGhpZGU6ICd2aXNpYmlsaXR5X29mZicsXG4gICAgICBtYXRlcmlhbEljb246IGZhbHNlLFxuICAgICAgaWQ6IG51bGxcbiAgICB9O1xuICAgIHRoaXMuY29uZmlnID0ge1xuICAgICAgLi4uZGVmYXVsdENvbmZpZyxcbiAgICAgIC4uLmNvbmZpZ1xuICAgIH07XG4gICAgaWYgKHRoaXMuY29uZmlnLmlkKSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IHRoaXMuc2VydmljZVxuICAgICAgICAuZ2V0T2JzZXJ2YWJsZSh0aGlzLmNvbmZpZy5pZClcbiAgICAgICAgLnN1YnNjcmliZShzaG93ID0+IHRoaXMudXBkYXRlU3RhdHVzKHNob3cpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lcnJvckhhbmRsZXIuaGFuZGxlRXJyb3IobmV3IEVycm9yKGBTdGF0dXMgY2FuIG5vdCBiZSBzZXQgd2l0aG91dCBbaWRdLmApKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZVN0YXR1cyhzaG93OiBib29sZWFuKSB7XG4gICAgaWYgKHRoaXMuY29uZmlnLm1hdGVyaWFsSWNvbikge1xuICAgICAgdGhpcy5yZW5kZXJlci5zZXRQcm9wZXJ0eShcbiAgICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LFxuICAgICAgICAnaW5uZXJIVE1MJyxcbiAgICAgICAgc2hvdyA/IHRoaXMuY29uZmlnLmhpZGUgOiB0aGlzLmNvbmZpZy5zaG93XG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgIXNob3cgPyB0aGlzLmNvbmZpZy5oaWRlIDogdGhpcy5jb25maWcuc2hvdyk7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgc2hvdyA/IHRoaXMuY29uZmlnLmhpZGUgOiB0aGlzLmNvbmZpZy5zaG93KTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9XG59XG4iXX0=