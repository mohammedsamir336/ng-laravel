import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import * as i0 from "@angular/core";
let ShowHideService = class ShowHideService {
    constructor() {
        this.states = [];
    }
    getIO(id) {
        let io = this.states.find(o => o.id === id);
        if (!io && id) {
            io = this.init(id);
        }
        return io;
    }
    init(id) {
        const subject = new ReplaySubject(1);
        const io = {
            id,
            show: false,
            subject
        };
        this.states.push(io);
        return io;
    }
    saveAndProadcast(io, show) {
        io.show = show;
        io.subject.next(io.show);
    }
    getObservable(id) {
        return this.getIO(id).subject;
    }
    setShow(id, show) {
        this.saveAndProadcast(this.getIO(id), show);
    }
    toggleShow(id) {
        const io = this.getIO(id);
        this.saveAndProadcast(io, !io.show);
    }
};
ShowHideService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ShowHideService_Factory() { return new ShowHideService(); }, token: ShowHideService, providedIn: "root" });
ShowHideService = __decorate([
    Injectable({
        providedIn: 'root'
    })
], ShowHideService);
export { ShowHideService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1oaWRlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2hvdy1oaWRlLXBhc3N3b3JkLyIsInNvdXJjZXMiOlsibGliL3Nob3ctaGlkZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBdUIsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDOztBQVcxRCxJQUFhLGVBQWUsR0FBNUIsTUFBYSxlQUFlO0lBRzFCO1FBRmlCLFdBQU0sR0FBRyxFQUFFLENBQUM7SUFFZCxDQUFDO0lBRVIsS0FBSyxDQUFDLEVBQVU7UUFDdEIsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFO1lBQ2IsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDcEI7UUFDRCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFTyxJQUFJLENBQUMsRUFBVTtRQUNyQixNQUFNLE9BQU8sR0FBRyxJQUFJLGFBQWEsQ0FBVSxDQUFDLENBQUMsQ0FBQztRQUM5QyxNQUFNLEVBQUUsR0FBRztZQUNULEVBQUU7WUFDRixJQUFJLEVBQUUsS0FBSztZQUNYLE9BQU87U0FDUixDQUFDO1FBQ0YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDckIsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRU8sZ0JBQWdCLENBQUMsRUFBVSxFQUFFLElBQWE7UUFDaEQsRUFBRSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDZixFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVNLGFBQWEsQ0FBQyxFQUFVO1FBQzdCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUM7SUFDaEMsQ0FBQztJQUVNLE9BQU8sQ0FBQyxFQUFVLEVBQUUsSUFBYTtRQUN0QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRU0sVUFBVSxDQUFDLEVBQVU7UUFDMUIsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMxQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RDLENBQUM7Q0FDRixDQUFBOztBQXpDWSxlQUFlO0lBSDNCLFVBQVUsQ0FBQztRQUNWLFVBQVUsRUFBRSxNQUFNO0tBQ25CLENBQUM7R0FDVyxlQUFlLENBeUMzQjtTQXpDWSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCwgUmVwbGF5U3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5pbnRlcmZhY2UgSVN0YXRlIHtcbiAgaWQ6IHN0cmluZztcbiAgc2hvdzogYm9vbGVhbjtcbiAgc3ViamVjdD86IFN1YmplY3Q8Ym9vbGVhbj47XG59XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFNob3dIaWRlU2VydmljZSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgc3RhdGVzID0gW107XG5cbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIHByaXZhdGUgZ2V0SU8oaWQ6IHN0cmluZyk6IElTdGF0ZSB7XG4gICAgbGV0IGlvID0gdGhpcy5zdGF0ZXMuZmluZChvID0+IG8uaWQgPT09IGlkKTtcbiAgICBpZiAoIWlvICYmIGlkKSB7XG4gICAgICBpbyA9IHRoaXMuaW5pdChpZCk7XG4gICAgfVxuICAgIHJldHVybiBpbztcbiAgfVxuXG4gIHByaXZhdGUgaW5pdChpZDogc3RyaW5nKTogSVN0YXRlIHtcbiAgICBjb25zdCBzdWJqZWN0ID0gbmV3IFJlcGxheVN1YmplY3Q8Ym9vbGVhbj4oMSk7XG4gICAgY29uc3QgaW8gPSB7XG4gICAgICBpZCxcbiAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgc3ViamVjdFxuICAgIH07XG4gICAgdGhpcy5zdGF0ZXMucHVzaChpbyk7XG4gICAgcmV0dXJuIGlvO1xuICB9XG5cbiAgcHJpdmF0ZSBzYXZlQW5kUHJvYWRjYXN0KGlvOiBJU3RhdGUsIHNob3c6IGJvb2xlYW4pIHtcbiAgICBpby5zaG93ID0gc2hvdztcbiAgICBpby5zdWJqZWN0Lm5leHQoaW8uc2hvdyk7XG4gIH1cblxuICBwdWJsaWMgZ2V0T2JzZXJ2YWJsZShpZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0SU8oaWQpLnN1YmplY3Q7XG4gIH1cblxuICBwdWJsaWMgc2V0U2hvdyhpZDogc3RyaW5nLCBzaG93OiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5zYXZlQW5kUHJvYWRjYXN0KHRoaXMuZ2V0SU8oaWQpLCBzaG93KTtcbiAgfVxuXG4gIHB1YmxpYyB0b2dnbGVTaG93KGlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBjb25zdCBpbyA9IHRoaXMuZ2V0SU8oaWQpO1xuICAgIHRoaXMuc2F2ZUFuZFByb2FkY2FzdChpbywgIWlvLnNob3cpO1xuICB9XG59XG4iXX0=